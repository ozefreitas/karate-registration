# Generated by Django 5.1.1 on 2025-03-26 14:39

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CompetitionDetail',
            fields=[
                ('id', models.SlugField(blank=True, max_length=100, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=99, verbose_name='Nome')),
                ('location', models.CharField(max_length=99, verbose_name='Local')),
                ('season', models.CharField(choices=[('2425', '2024/2025'), ('2526', '2025/2026'), ('2627', '2026/2027'), ('2728', '2027/2028'), ('2829', '2028/2029'), ('2930', '2029/2030'), ('3031', '2030/2031'), ('3132', '2031/2032'), ('3233', '2032/2033'), ('3334', '2033/2034'), ('3435', '2034/2035'), ('3536', '2035/2036'), ('3637', '2036/2037'), ('3738', '2037/2038'), ('3839', '2038/2039'), ('3940', '2039/2040')], max_length=15, verbose_name='Época')),
                ('start_registration', models.DateField(verbose_name='Início das inscrições')),
                ('end_registration', models.DateField(verbose_name='Fim das inscrições')),
                ('retifications_deadline', models.DateField(verbose_name='Fim do periodo de retificações')),
                ('competition_date', models.DateField(verbose_name='Dia da prova')),
                ('has_ended', models.BooleanField(default=False)),
                ('has_teams', models.BooleanField(default=False, verbose_name='Tem Equipas')),
                ('encounter', models.BooleanField(default=False, verbose_name='É estágio/encontro')),
                ('encounter_type', models.CharField(blank=True, choices=[('regional', 'Regional'), ('nacional', 'Nacional'), ('internacional', 'Internacional')], max_length=16, null=True, verbose_name='Estágio')),
            ],
        ),
        migrations.CreateModel(
            name='FeedbackData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='Primeiro Nome')),
                ('last_name', models.CharField(max_length=100, verbose_name='Último Nome')),
                ('email', models.EmailField(max_length=254)),
                ('feedback', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='PasswordConfirmReset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('new_password1', models.CharField(max_length=36, verbose_name='Palavra Passe')),
                ('new_password2', models.CharField(max_length=36, verbose_name='Repetir Palavra Passe')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('SUPERADMIN', 'Super Admin'), ('DOJO_OWNER', 'Dojo Owner'), ('INSTRUCTOR', 'Instructor'), ('STUDENT', 'Student')], default='STUDENT', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(default='skip-logo.png', upload_to='profile_pictures', verbose_name='Imagem de perfil')),
                ('dojo_contact', models.IntegerField(default=123456789, verbose_name='Contacto do Dojo')),
                ('cellphone_number', models.IntegerField(default=123456789, verbose_name='Número de telemóvel pessoal')),
                ('dojo', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
